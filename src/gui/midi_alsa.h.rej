--- src/gui/midi_alsa.h	8 Aug 2007 08:04:53 -0000	1.17
+++ src/gui/midi_alsa.h	6 Jan 2008 23:20:26 -0000
@@ -257,19 +345,86 @@
 				if (defaultport) { //if port "65:0" (default) try "17:0" as well
 					seq_client = 17; seq_port = 0; //Update reported values
 					if(snd_seq_connect_to(seq_handle,my_port,seq_client,seq_port) < 0) {
-						snd_seq_close(seq_handle);
-						LOG_MSG("ALSA:Can't subscribe to MIDI port (65:0) nor (17:0)");
-						return false;
+						seq_client=128; seq_port=0; //try timidity defalt
+						if (snd_seq_connect_to(seq_handle,my_port,seq_client,seq_port) < 0) {
+							snd_seq_close(seq_handle);
+							seq_handle=0;
+							LOG_MSG("ALSA:Can't subscribe to MIDI port (65:0),  (17:0) nor (128:0)");
+							return false;
+						}
 					}
 				} else {
 					snd_seq_close(seq_handle);
+					seq_handle=0;
 					LOG_MSG("ALSA:Can't subscribe to MIDI port (%d:%d)", seq_client, seq_port);
 					return false;
 				}
 			}
 		}
 
-		LOG_MSG("ALSA:Client initialised [%d:%d]", seq_client, seq_port);
+		LOG_MSG("ALSA:MIDI Client initialised [%d:%d]", seq_client, seq_port);
+		return true;
+	}
+
+	bool OpenInput(const char * conf) {
+		LOG_MSG("opening input...");
+		char var[10];
+		unsigned int caps;
+
+		// try to use port specified in config file
+		if (conf) {
+			if  (conf[0]) { 
+				safe_strncpy(var, conf, 10);
+				if (parse_addr(var, &seqin_client, &seqin_port) < 0) {
+					LOG_MSG("ALSA:Invalid input alsa port %s", var);
+					return false;
+				}
+			}
+			else seqin_client=-1;
+		} else return false;
+
+		bool openedOutput = true;
+
+		if (!seq_handle) {
+			if (my_snd_seq_open(&seq_handle)) {
+				LOG_MSG("ALSA:Can't open sequencer for input");
+				return false;
+			}
+
+			bool openedOutput = false;
+			my_client = snd_seq_client_id(seq_handle);
+			snd_seq_set_client_name(seq_handle, "DOSBOX");
+			snd_seq_set_client_group(seq_handle, "input");
+		}
+
+		caps = SND_SEQ_PORT_CAP_WRITE | SND_SEQ_PORT_CAP_SUBS_WRITE;
+
+		myin_port =
+			snd_seq_create_simple_port(seq_handle, "DOSBOX_IN", caps,
+					SND_SEQ_PORT_TYPE_MIDI_GENERIC | SND_SEQ_PORT_TYPE_APPLICATION);
+					//SND_SEQ_PORT_TYPE_SYNTH | SND_SEQ_PORT_TYPE_MIDI_GENERIC);
+		if (myin_port < 0) {
+			if (!openedOutput) {snd_seq_close(seq_handle);seq_handle=0;}
+			LOG_MSG("ALSA:Can't create ALSA input port");
+			return false;
+		}
+
+		if (seqin_client != SND_SEQ_ADDRESS_SUBSCRIBERS && seqin_client>=0) {
+			/* subscribe to MIDI port */
+			if (snd_seq_connect_to(seq_handle, myin_port, seqin_client, seqin_port) < 0) {
+				LOG_MSG("ALSA:Can't subscribe to MIDI port (%d:%d) for input", seqin_client, seqin_port);
+				seqin_client=-1;
+				//return false;
+			}
+		}
+
+		//start receiving thread
+		input_exit=0;
+		mySeqHandle = seq_handle;
+		input_thread = SDL_CreateThread(input_handler, NULL);
+
+		if (seqin_client>=0) LOG_MSG("ALSA:MIDI input client connected [%d:%d]", seqin_client, seqin_port);
+		else LOG_MSG("ALSA:MIDI receiving client initialised");
 		return true;
 	}
 
